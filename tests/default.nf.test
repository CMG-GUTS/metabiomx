nextflow_pipeline {

    name "TEST FULL PIPELINE"
    script "../main.nf"
    tag "full pipeline"
    tag "pipeline"

    test("TEST METAPIPE WORKFLOW") {

        when {
            params {
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.trace.succeeded().size()
                ).match() },
                { assert snapshot(
                    path("${outputDir}/trimmed")
                    .list()
                    .collect { getRecursiveFileNames(it, outputDir) }
                    .flatten()
                ).match("trimmed") },
                { assert snapshot(
                    path("${outputDir}/decontamination")
                    .list()
                    .collect { getRecursiveFileNames(it, outputDir) }
                    .flatten()
                ).match("decontamination") },
                { assert snapshot(
                    path("${outputDir}/multiqc")
                    .list()
                    .collect { getRecursiveFileNames(it, outputDir) }
                    .flatten()
                ).match("multiqc") },
                { assert snapshot(
                    path("${outputDir}/interleaved")
                    .list()
                    .collect { getRecursiveFileNames(it, outputDir) }
                    .flatten()
                ).match("interleaved") },
                { assert snapshot(
                    path("${outputDir}/read_annotation")
                    .list()
                    .collect { getRecursiveFileNames(it, outputDir) }
                    .flatten()
                ).match("read_annotation") },
                { assert snapshot(
                    path("${outputDir}/assembly")
                    .list()
                    .collect { getRecursiveFileNames(it, outputDir) }
                    .flatten()
                ).match("assembly") },
                { assert snapshot(
                    path("${outputDir}/CAT_contig")
                    .list()
                    .collect { getRecursiveFileNames(it, outputDir) }
                    .flatten()
                ).match("CAT_contig") }
            )
        }
    }
}

def getRecursiveFileNames(fileOrDir, outputDir) {
    if(file(fileOrDir.toString()).isDirectory()) {
        return fileOrDir.list().collect { getRecursiveFileNames(it, outputDir) }
    }
    return fileOrDir.toString().replace("${outputDir}/", "")
}